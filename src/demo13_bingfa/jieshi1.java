package demo13_bingfa;

public class jieshi1 {
    /*
    * 并发与并行的区别
    * 并发 concurrency：多线程同时操作一个资源，并不是真正的同时操作，而是交替操作，单核cpu情况下，把资源按时间段分配给多个线程
    * 张三李四王五，同时用一口锅炒菜
    * 并行 parallelism：是真正的多个线程同时执行，多喝cpu，每个线程使用一个cpu执行操作
    * 张三李四王五，每个人一口锅炒菜
    *
    * 并发编程描述的是一种使系统允许多任务再重叠时间段内执行的设计结构，不是值多个任务再同一个时间段内执行
    * 而是指系统具备处理多个任务在同一时间段同时执行的能力
    * 高并发是指我们设计程序，可以支持海量任务在执行在时间段上的重叠情况
    *
    * 高并发的标准：
    * QPS:每秒响应的HTTP请求数量，QPS不是并发数量
    * 吞吐量：单位时间内处理的请求书，由QPS和并发数决定的
    * 平均响应时间：系统对一个请求做出响应的评价时间。
    * QPS = 并发数/平均响应时间
    * 并发用户数：同时承载正常使用系统的用户数量
    * 互联网分布式架构设计，提高系统并发式能力的技术：
    * 垂直扩展
    * 水平扩展
    *
    *
    * 垂直扩展
    * 提升单机处理能力：
    * 1.提升单机的硬件设备，增加cpu的核心数，升级网卡，扩容硬盘，升级内存
    * 2.提升单机的架构性能，使用Cache提高效率，使用异步请求来增加单服务吞吐量，NoSQL提升数据库访问能力
    *
    * 水平扩展：
    * 集群：一个厨师搞不定，多雇几个厨师炒菜，多个人干一件事
    * 分布式：给厨师整两个助手,一个洗菜一个择菜，一件事拆分多个步骤
    * 站点层扩展：Nginx反向代理，一个tomcat跑不动，用多个去实现
    * 服务层扩展，RPC框架实现远程调用，Spring Boot与Spring Cloud，Dubbo、分布式架构，将业务逻辑炒粉到不同的PRC Client各自完成对应的业务
    * 如果业务并发量很大，就增加新的PRC Client
    * 数据层扩展：在数据量很大的情况下，将原来的一台数据库服务器，拆分多台，以达到扩城系统性能的目的，主从复制，读写分离，分表分库
    *
    *
    *
    * JUC
    *
    *   是一个java。jdk专门用来帮助开发者完成java并发编程的
    *
    *
    *
    * 进程与线程
    * java默认的线程数有两个
    * main主线程
    * GC垃圾回收机制
    *
    * java是不能自身开启java线程的，java无法操作硬件，只能通过调用本地方法native方法，C++去编写的动态数据库
    * java实现多线程的三种方式
    * 1.继承 extend thread
    * 2.接口 implement Runnable
    * 3.实现Callable接口这两个都是，实现业务逻辑的，23都是接口实现
    * 其中23的区别在Callable有返回值，Callable的call方法有返回值
    * */
}
